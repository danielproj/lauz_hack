~WEEK 2 Lecture: Sept. 26, 2022
~2022-09-26T14:40:42.358+02:00
~https://tube.switch.ch/videos/jsomXIBEhN
~CS-438 Decentralized Systems Engineering
[0.0:6.0] Okay, so recording as of now.
[6.0:9.0] And I will be also using Zoom.
[9.0:14.0] So if you need, you can join remotely via Zoom.
[14.0:21.0] But that's, I was considered that less preferable than being here in person,
[21.0:24.0] where discussion is easier.
[24.0:27.0] So.
[27.0:31.0] Okay, so yeah, I see it.
[31.0:39.0] Well, I think I briefly saw that one person found the Zoom session and left maybe because they're also here and didn't need it.
[39.0:48.0] But anyway, you know, the link for the Zoom session is also on the Moodle page, like other important information.
[48.0:53.0] Also, oh yeah, one other thing.
[53.0:63.0] I very much encourage you just to raise your hand and speak up in person when you have questions or when a participating in the discussion.
[63.0:76.0] But if you are a little bit more shy and would like to, you know, post questions or comments anonymously, there's also a speak up link.
[76.0:82.0] That you should find the link to that also on the Moodle page.
[82.0:86.0] Now, you have to be logged in to see these links.
[86.0:93.0] They'll only appear if you're logged in as an EPFL student.
[93.0:104.0] But, but you can use the the speak up page and I'll try to pay attention to that as well during lectures.
[104.0:107.0] Although sometimes I have to be reminded.
[107.0:118.0] So I apologize in advance if I miss some some speak up things scrolling up until you say, hey, look at the look at somebody say, hey, look at the speak up.
[118.0:120.0] So thank you.
[120.0:124.0] Okay, so so that's just some basic logistics.
[124.0:127.0] Now I want to introduce the content of the course.
[127.0:129.0] What is this course about in general?
[129.0:135.0] So again, this is decentralized systems engineering. It's about exactly what the title says it's about.
[135.0:142.0] It's about engineering decentralized systems. Well, what does that mean? Of course, well, what is a decentralized system?
[142.0:151.0] Now, of course, I don't have the end all definition. I don't know if there, you know, anybody has a definition that everybody accepts, but this is my definition.
[151.0:165.0] So to me, a decentralized system is a particular some class of distributed systems. So distributed systems to me are a broader topic that includes decentralized systems.
[165.0:185.0] But so at least a distributed system in general is any system that's distributed where multiple nodes communicate with each other over a network and some fashion in order to get something done that they wouldn't be able to or you wouldn't want to just with one note alone.
[185.0:209.0] And that they can be distributed for all manner of reasons. But a decentralized system, again, at least to me is is one where where there's a decentralized kind of authority different nodes are actually under different authorities that might not be completely coordinated might not be come might not completely trust each other.
[209.0:230.0] Right, they might be controlled by different people, different organizations or interests. Right. So so it's a very different management paradigm from some of the more more centralized distributed systems. Right. So what are examples of centralized distributed systems?
[230.0:250.0] I'm sure you use centralized distributed systems all the time. They're extremely pervasive cloud systems systems like Google, yeah, who Facebook, you know, all of the big online services you're familiar with are mostly examples of very centralized distributed systems where, you know, one organization is in charge.
[250.0:265.0] They're highly very globally distributed, you know, they're, you know, Google and Facebook and these big companies have their own private, you know, distribution networks all over the world and data centers spread all over all over the world. Of course, so obviously they're very distributed.
[265.0:279.0] But we don't usually call them decentralized. They call them really exactly the opposite. Right. Very centralized decentralized systems. Well, those have been around for a long time, you know, since the beginning of the internet.
[279.0:285.0] In fact, the internet was originally, well, it was originally called the arpa not not the internet.
[285.0:295.0] But and it was originally designed as deliberately to be a very decentralized system. Right.
[295.0:316.0] And that's because the arpa net was designed to be extremely resilient. It was created by arpa, which is now called DARPA, but the US Defense Advanced Research Projects Agency as a, as a kind of digital computing system that was intended to be extremely resilient and a robust to attack of all kinds.
[316.0:336.0] And of course, the big attack threat by that, by that time was, well, the Soviet Union, right. You know, the, you know, somehow, you know, it's amazing how, how names change, but, but, you know, history repeats itself in different ways.
[336.0:349.0] In terms of some of the big geopolitical. Well, issues today as well as back then. But anyway, so.
[349.0:370.0] So the arpa net was trying to be decentralized specifically so that attacking any part of it or, you know, breaking off communication in any part of it would hopefully it would, it was still the rest of it would, would still survive. And we'll get, we'll get a lot deeper into that aspect of decentralization a lot later.
[370.0:383.0] The internet was always intended to be very decentralized. And that also applies to many of the basic applications that, you know, that were first, first created to run on the internet.
[383.0:399.0] Things that, that you're probably still very familiar with that are still very much operational like email, right. So we're all still blessed with or stuck with email, regardless of, you know, whichever, whichever your point of view is with all its.
[399.0:419.0] And, you know, usefulness and charm, right. But also things that that have either come and gone or are still around, but, but more in Indonesia areas, things like using it. Now, how many of you have heard of using it.
[419.0:445.0] I feel wow good. I'm impressed. How many of you have used using it. Wow. Wow. So, you know, you, you win some prizes there. Right. So, so, actually, how many of you have you have used using that only because you took my CS238 is 234 course as an undergrad. Thank you. Okay.
[445.0:461.0] That that warms my heart. But anyway. So, so using that is one of the technologies that for a while was like neck and neck with email.
[461.0:489.0] So, email was the point to the standard point to point messaging, you know, application on on the internet and using it was right with it as the. The public, you know, messaging collaboration, posting, deliberation, that, that kind of thing. That's that was, you know, that was what we now think of as, you know, what, what we now use social media and.
[489.0:509.0] Reddit and all those kinds of forums for right. So, and we'll look at look at using it more closely because it was really the first truly decentralized public, you know, digital global public digital forum across the across the internet.
[509.0:522.0] We'll look at more look at it more closely in terms of its design. And like email, it was designed to be very decentralized, which had both, you know, positives and negatives as we'll see.
[522.0:542.0] But then more, more recently things like internet, me, like chat or IRC or the various systems that came out of the fear to fear file sharing.
[542.0:559.0] And then, you know, the most anonymous anonymous messaging systems like poor, and then of course, more, most recently in the past decade decade or so blockchains and crypto currencies like Bitcoin, the Ethereum has become really said, the biggest, you know, kind of most.
[559.0:582.0] Most active areas of development and interest in decentralized systems, right. Okay, so. And we'll look, we'll look in detail at all of those, but, but more, especially the principles that underlying that how, you know, what, what are decentralized systems trying to accomplish them?
[582.0:601.0] How, what are the fundamental challenges in, in designing and building decentralized systems? How do you deal with the fact that these systems are tend to be distributed under many different authorities that don't fully trust each other, don't fully get along, right.
[601.0:622.0] And so, you know, we're going to hopefully give you a feel for the, for the techniques that make them kind of work the way we can solve it or at least partly solve some of these problems, but unfortunately, decentralized systems as they has an area is still very much unsolved, you know, area in general.
[622.0:640.0] There are a lot of unsolved problems or, you know, problems that we have only really bad solutions for, you know, there's like, you know, there's no good solutions, a few kind of bad answers that are all compatible with all the other bad answers and nobody can agree on, you know, which bad, which bad solution, right.
[640.0:667.0] So, you'll, you'll see a number of examples of that kind of thing. So, yeah, we'll, we'll look at a number of real past and present systems and maybe most importantly, you're going to get hands on experience with decentralized systems, because you're going to implement what you're going to as part of the exercise as you'll be building a small decentralized system called piercester, which is, you know, kind of a,
[667.0:686.0] originally is fired by peer-to-peer file sharing applications, but, you know, it'll start out basically as a simple messaging application that you'll implement yourself, you'll add some basic files, hearing, then you'll make it a little bit more block chaining by adding consensus and, you know, blockchain kind of functions.
[686.0:713.0] And then later in the semester, you'll do the last part of the semester will be a project programming intensive project where you're expected to figure out yourself some, you know, interesting, non trivial, additional thing to do to it to add to a, you know, major additional feature to add to it or, you know, a major significant decentralized application to build on it or, you know, something like that.
[713.0:731.0] After the, the TA is already talked with you about this some on last week, but, but you'll do that. So you'll do the earlier homework exercises alone, but the, but the final project is in groups.
[731.0:752.0] So you'll be working together, building a larger decentralized systems or application, but of course with, with, you'll need to define it. So design it. So it has clearly defined pieces that each of you individually take responsibility for as well.
[752.0:770.0] So that we need that for, you know, so that we can grade individually, right. But anyway, so, so a lot of the effort in this course will be on these programming assignments. They're not going to be easy.
[770.0:794.0] So building the centralized systems tends to be not easy at all. In fact, a lot harder than just say, you know, simple programs running on your own machine and a lot harder, even than say programs running on, you know, design for cloud system to run on Amazon Web Services or something like that.
[794.0:806.0] Right. So why, why do you think that is either in your experience or just as just guessing. Why would the centralized systems be harder?
[806.0:811.0] Actually, for several reasons, but yeah.
[811.0:826.0] Proflow is not very linear. Absolutely. So you're, you tend to be in an event based world. You react to, you know, each node, the logic of each node is going to be well, you know, I've done some stuff.
[826.0:839.0] And now I just need to wait until something else happens, you know, and something else happening can be well any arbitrary message comes from another node and they need to figure out what to do based on that or a time refiring or something like that.
[839.0:856.0] So, yeah. So, you know, it can be very non-linear. It depends on what happens in the fast. It's not just, you know, one, two, three thing. Yeah.
[856.0:873.0] Great. Yeah. Exactly. So that's another or a thogonal, but equally important aspect that's especially important in decentralized systems because, you know, unlike Amazon, there's very good standardizing their own systems in there.
[873.0:896.0] You know, you, you, you buy this kind of machine. It's going to be this particular kind of hardware. And it's all going to work in this particular way. Well, a decentralized system. You're trying to run on a very big, diverse, you know, set of machines with, you know, run by different people under different standards. Nobody's controlling everything. Right. So it, yeah, it adds a whole lot more variables that good. Yeah.
[896.0:924.0] Great. Yes. Another extremely important point. Just from a development and evolution perspective, it's a lot harder to get a big group of, you know, developers spread all over the world and none of them answering to each other to agree. Well, let's implement this Bitcoin improvement proposal or this Ethereum improvement proposal or something like that.
[924.0:945.0] I mean, you know, it kind of happens, but it takes a long time and a lot of discussion and, you know, and, you know, for years, well, the Bitcoin community was deadlocked on one megabyte blocks or two megabyte blocks. Who remembers this, right? So, you know, one of the big kind of failures to even begin to agree on like the simplest possible.
[945.0:958.0] You know, kind of design upgrade for a decentralized system like Bitcoin. So, yeah, so, you know, that kind of thing is way harder than if, you know, Jack Bezos says, just do it that way.
[958.0:963.0] You know, the end of discussion. Right.
[963.0:977.0] Okay. So, yeah, these are great great point. Actually, I haven't another one I haven't heard yet. Like, did I miss any raised hands that were about other aspects? Yeah.
[977.0:995.0] Oh, great. That's exactly what I was thinking security, right? You know, so when everything is running in Amazon Web Services, you kind of have to just trust Amazon. Like, you know, they've got they've hired, you know, good millions of security people to try to make their systems as secure as possible.
[995.0:1020.0] Open trust that their system really are secure as they claim they are there always, but they usually are right, you know, but, you know, if you assume their systems are secure, then, you know, you have this nice environment where everything securely operates like Amazon says it does it runs your code honestly, you know, and hopefully other cloud services can't break you and fiddle with yours and stuff like that.
[1020.0:1035.0] In a decentralized system, things are vastly different. Usually the nodes, you know, all the nodes in like a bit corner Ethereum system, you know, we hope they'll do what they're supposed to do under the protocol specs, but they totally might not right.
[1035.0:1055.0] You know, anybody can reprogram their bit corner Ethereum node to do whatever they want and, you know, including the malicious in all arbitrary ways. So as a result, what we call Byzantine systems, Byzantine fault tolerance or Byzantine robot systems tend to be very interesting and very important.
[1055.0:1068.0] Anytime we're talking about decentralized systems, whereas, you know, in cloud systems, it's just a bunch of inefficiency just skip it and use non Byzantine algorithms and consensus algorithms and stuff like that, right.
[1068.0:1076.0] So it it shifts us into a totally different world in terms of security and the and the threat models we have to think about.
[1076.0:1090.0] Yeah, so these are these are great examples. Thanks. Yeah, so so, you know, again, the focus will be on decentralized systems, you know, not really because, you know, they're better than distributed.
[1090.0:1098.0] So many ways distributed systems are always more efficient. They're certainly always easier. They're, you know, they're usually faster, you know, and stuff like that.
[1098.0:1110.0] But well, you know, why do we care about decentralized systems? Well, because of the opposite, because they're hard, because they're, you know, interesting, because they're hard, you know, and maybe for other reasons too, but and we'll come to that.
[1110.0:1112.0] Okay.
[1112.0:1118.0] Now, let's see. I, I owe it.
[1118.0:1126.0] I'm not going to talk too much about course, the course logistics, but just briefly.
[1126.0:1149.0] So this is an approximate syllabus of the topics we'll be looking at over the over the course of the lectures. We'll be talking about different algorithms and techniques, some of which you'll need to use in your homework assignments, some of which you won't necessarily need to use, but might be interesting to use in your project.
[1149.0:1165.0] I hope, you know, you'll become aware and interested in a lot of interest, different, um, decentralized algorithms and techniques used, used to build decentralized systems for your projects or for use in other cases.
[1165.0:1184.0] I already mentioned that, uh, Moodle is the main main reference point, uh, keep up on that all the time. There's also an email address, uh, to, to email all of the instructors. So that's, that's the most reliable address to use if you want to ask us a direct question.
[1184.0:1194.0] Fortunately, I tend to, to lose emails in my overflowing inbox all the time. I just, you know, can't keep up on it. So I apologize.
[1194.0:1207.0] So that's one of the several reasons it's best to email, you know, that is a CS438 and not just me or just one of the TA's because, you know, one of us might miss what might miss it or be away at the time or something like that.
[1207.0:1217.0] Right. Um, so, uh, as I already mentioned in the, in the lectures, you know, questions and discussion are very welcome.
[1217.0:1236.0] Um, I will, I won't normally use slides like this, but I'll, I'll be writing, you know, hand drawn notes and diagrams on the, you know, as we go along, as we explain and go through algorithms and design issues.
[1236.0:1256.0] And stuff like that. Um, and I will be posting the slides afterwards. So, you know, if you don't have to exhaustively take your own notes and, you know, unless you want to record stuff that, uh, that I didn't put here or, or, or, or in the notes that are posted.
[1256.0:1278.0] Um, but, um, so, uh, so this is actually should, um, no, this is, is different as of this year. It should be 50, 50, as, as you saw in the, uh, in the TAs.
[1278.0:1294.0] And the slides from, uh, from, from last week. Um, so, so the, the grading will be, will be basically half the, uh, the individual homework exercises and half based on the final project.
[1294.0:1310.0] Um, so there's TA guided sessions on, on Fridays where, where the CAs can, uh, can help you, you know, deal with issues, but you might be struggling with. Um, and, and you can discuss issues or questions.
[1310.0:1325.0] And there's also a time and space reserve basically for, just for you to, to gather a hack or, or, or in the project phase, uh, gather, you know, with your, with your teammates and discuss us, you designed together, things like that. Right.
[1325.0:1337.0] So, uh, you know, instructors won't be there in general, but it's, uh, it's just a time and space that you can use for this, for work on this course as you, have you like.
[1337.0:1356.0] Um, now, of course, so, especially in the last project phase, phase your, your welcome and encourage to work together, you'll have to work together, but everybody implements their own code, especially in the, in the labs and in general, in your part of the projects.
[1356.0:1367.0] Um, so, you know, don't copy, don't share a copy code. Uh, so, uh, implement your own, okay.
[1367.0:1375.0] Um, yeah. So there are three exercise steps that build on each other. So don't, uh, so make sure, uh, and they aren't trivial.
[1375.0:1383.0] So don't leave them for the last minute and don't, don't skip things. That'll bite you in the, in the next, uh, next assignment.
[1383.0:1391.0] Um, the TA's will help that they won't, won't, they won't write your code for you. So don't ask them to.
[1391.0:1402.0] Um, and we're all, we're also changing, uh, revising the, uh, the group size guidelines. This is kind of necessary because the class is exploding in size.
[1402.0:1422.0] Uh, on the one hand, I'm so happy that so many of you are interested in the course. This is great. Welcome on the other hand, where we're probably going to, we're going to have to take some, some scaling provisions. So, so, uh, we'll decide on the exact group size, but, uh, constraints, but it'll probably have to be on average, bigger than two or three this time.
[1422.0:1445.0] Um, and of course projects, you get to design here to decide your own, but it's important that they fit into the course, right? Ask, ask the TA's. If you're, you know, when, when we get to the stage of choosing courses, we'll, we'll ask you to formulate something and get, get feedback on it, make, you know, confirm that it really does fit within the course.
[1445.0:1472.0] We're fairly, uh, we, we generally, uh, we're, we're fairly open to, you know, all manner of things, but it has to be actually something to centralize, you know, don't ask, don't ask us to do a project that just is, you know, kind of running a machine learning simulation. I'm your own laptop in a completely centralized fashion that doesn't, doesn't involve anything remotely, you know, even arguably decentralized or something like that. Right. So it has to fit the course.
[1472.0:1487.0] Okay. Yeah. And then the general structure of the, of, uh, approximate structure of the, of the course project.
[1487.0:1502.0] Um, yeah. And, um, I kind of already addressed, addressed some of this. You know, why, why do we want to either bother bother studying decentralized systems?
[1502.0:1519.0] Well, you know, for one thing, they're, they're interesting, they're hard. But, you know, there might be some, some non obvious reasons too. Like life is a, you know, our society is a decentralized system where, you know, all of us operate under different authorities.
[1519.0:1547.0] Unfortunately, and, and, um, and, you know, we have to agree with each other. We have to create, you know, scalable structures to, you know, with which we can, you know, collectively agree on how to govern ourselves, how to accomplish, you know, different things, how to, how to, you know, create large things that are way too big for one person.
[1547.0:1556.0] While maintaining a balance with individual freedom and, you know, so that we're not all just, you know, automatons working for jack business, right.
[1556.0:1564.0] So, um, no offense for any of you who have done Amazon internships by the way.
[1564.0:1584.0] Anyway, but, and, um, and, you know, like I, like I mentioned, they're, they're, they're fundamentally more difficult. You know, some of us feel that they're, that they're important as, as tools for to help preserve
[1584.0:1597.0] freedoms, privacy, things like that. It's, you know, important to develop technologies that aren't in control under one, under one authority for, for various reasons. And we'll, we'll get to that later.
[1597.0:1601.0] Um, okay.
[1601.0:1617.0] Um, yeah, and we already basically covered that. So, of course, yeah, there are plenty of reasons, you know, why we might prefer centralized system. There, you know, the, the converse of the things we discussed.
[1617.0:1633.0] Certainly, simply to manage. You can, you can kind of always rely on, on, on the security, at least, if the basic underlying, you know, cloud system or data center, whatever is secure.
[1633.0:1648.0] And, you know, the central life systems are almost always more efficient. Um, and especially it's a whole lot easier to deal with versioning, whether of software or protocols or whatever in a centralized system, right.
[1648.0:1669.0] And say, okay, we're now rolling out version three. And, you know, even if we're carefully gradually rolling out version three of this protocol to only certain nodes and then, you know, increasing it to, you know, in case there are bugs, but we can still usually, you know, completely roll out version three completely get rid of version two from the whole network.
[1669.0:1690.0] Before we start talking about version four, right. We can do that in a centralized system in a decentralized system. You can never do that. Right. Usually you, you know, you rule, you roll out version three and then 78% of the nodes actually, you know, kind of upgrade to version three and over the course of a year or two.
[1690.0:1706.0] And then there's still a bunch of holdouts and bunch of nodes running old versions that you then decide, okay, do we want to be come and stay, you know, compatible with them. And it's so how do they, how do we do that? And, you know, there are a bunch of different incompatible implementations and.
[1706.0:1720.0] So, you know, so so versioning is just, you know, one of the major management, management challenges in a truly decentralized system.
[1720.0:1736.0] Decentralize it's in their use for many different things and some of their properties are different depending on what we use them for. And as we explore some of the interesting historical decentralized systems, I think you'll see this.
[1736.0:1751.0] So, so like, you know, using that started out as basically a communication public messaging platform. And that's what that's, you know, just basic communication is what the earlier decentralized systems focused on.
[1751.0:1771.0] Whereas the more, you know, the later, the, the next wave of say peer to peer sharing applications much more strongly emphasized not just communication, but things like search, how do you find a shared file or other item that you that you want.
[1771.0:1783.0] And how do you handle, you know, large amounts of data efficiently. This is, this is what bit torrent really where bit torrent made a made a significant advance. Right.
[1783.0:1800.0] And then, and then later we had decentralized systems that started to focus on things like, well, how do you connect with people? How do you decide whom to trust in this universe where, you know, you don't have a guarantee that everybody trust everyone else.
[1800.0:1814.0] But maybe you only trust a few people that you know, right. So this is where social networking came into decentralized systems first, first with the PGP, pretty good privacy. How many of you have used BGP or GPG?
[1814.0:1837.0] Okay. Good. A few of you. Yeah. So we'll get into into this and it's precedent to decentralized social networking, which is still a very a topic of interest that, you know, long predates the centralized social networking platforms like Facebook and, you know, everything in that category.
[1837.0:1853.0] And, but, but then, you know, beyond just say communication within groups or with friends, there's, there's even, you know, ambitions for decentralized, you know, more formal coordination.
[1853.0:1870.0] So deliberation, peer review, voting, reputation systems, how, how does a, how does a, you know, collective group of people, you know, actually, you know, behave kind of like a democracy in, in the context of a truly decentralized systems.
[1870.0:1882.0] Now, how many of you have heard of Dows decentralized autonomous organization. Okay. Great. How many of you have like you like say voting in a doubt?
[1882.0:1893.0] You have. Awesome. Yeah. Which one if you don't mind my asking?
[1893.0:1910.0] Okay. Yeah. Yeah. Excellent. Yeah. Yeah. So, yeah. So, so, so, so Dows are one of these, you know, kind of decentralized, you know, ideas that, you know, hot topics that emerge from smart contracts systems.
[1910.0:1931.0] And, you know, the idea of being well, anyone in a group of people can create a decentralized autonomous organization by writing a smart contract that defines the, the rules for voting on, you know, who's a member who gets to vote what happens when you vote on something to do, whether it's investment or collective investment or something else.
[1931.0:1952.0] Right. Yeah. So, so, you know, there's a bunch of interesting kind of both promises and challenges in that space. We'll look at that a little bit. But, but then of course, more broadly, this, you know, the latest wave of decentralized systems block change, cryptocurrency smart contract systems.
[1952.0:1972.0] And we already discussed some of these, some of these recurrent challenges, some of the things that regularly come up in building decentralized systems that usually aren't so much of a problem in centralized systems like starting with just how do you identify participants?
[1972.0:1982.0] Right. Because, you know, in a decentralized system, the internet doesn't know what a person is, you know, at least not reliably.
[1982.0:1998.0] So, it's hard for the internet or decentralized systems from, you know, to distinguishing from, to distinguish from a real live person from, you know, one or a million fake accounts that, you know, created by bots or something.
[1998.0:2016.0] There's all kinds of information integrity and privacy issues, accountability for bad behavior, right. If you're, if you're, if you miss behave on Amazon, well, some Amazon employee, you know, handles the report and takes you off for say, you know, stop, stop doing that or you'll lose your Amazon account.
[2016.0:2017.0] Right.
[2017.0:2034.0] So, if you're a decentralized system, well, you know, if it's truly decentralized, maybe there's nobody who has that power, right. So then what, you know, does that, does that mean there's no accountability? Well, in some decentralized systems that hasn't been the case and it can be a problem.
[2034.0:2049.0] If you try to add accountability, well, how do you manage the power that, you know, who gets to decide, you know, who's misbehaving and when to kick them off or what, you know, what recorselative that gets a lot harder in decentralized systems.
[2049.0:2064.0] And then, you know, a lot of things like other things like denial of service attacks like, you know, somebody can just flood you with a whole bunch of otherwise legit amid message, but, you know, they're pegging your CPU and your bandwidth and you can't do anything else, right.
[2064.0:2080.0] And of course, there's just a ton of efficiency issues. So, okay. So that's that's kind of a general introduction to the course content.
[2080.0:2103.0] I want to show in the in the next part, I want to dive a little bit deeper into one of the most basic forms of communication known as gossip and how that, how that serve as the basis for this first wave of decentralized large scale decentralized system on internet called, called using it.
[2103.0:2118.0] So, since it's about time for a break, I'll just ask if there are any questions so far about the general course logistics or general course topic.
[2118.0:2121.0] One.
[2121.0:2134.0] Okay, so if not, let's take let's take the break a little bit early and come back at 1110. Okay, so I'll see you back here at 1110. Thanks.
[2151.0:2166.0] Okay, thanks. Oh, welcome back. Let's continue.
[2166.0:2194.0] So gossip and use net. So why did let's come back to this at least for those of you who didn't take my 238 234 course and may not you know what use net is. Well, like I mentioned, it was the it was the first truly decentralized system on the internet for public interchange of information messages, comments.
[2194.0:2210.0] Basically, the first global public bulletin board where you could kind of post whatever you want to discuss, whatever topic you wanted to discuss and meet like minded people anywhere in the world.
[2210.0:2229.0] And it was it was created the well in the in the fairly early days of the the arpanette and the internet in first created in 1979. So it has some real history goes back a ways.
[2229.0:2248.0] And so in to zoom in a little bit, I know you can't see this very well, but here, let me first just zoom into the top here.
[2248.0:2259.0] This was one of the early manual maps manually created asky asky text maps of the use net.
[2259.0:2271.0] The internet as as the use net. Right. So this was when there was, see how many how many nodes is that I can't remember exactly.
[2271.0:2288.0] But you know, you can count them if you care to. And these were all the node names and the and basically the point to point connections between notes in in in the use net as of 1981.
[2288.0:2302.0] Right. So we'll get more into you know, what what people did with this, what how the protocol work, but. But basically, as you can probably guess from a lot of those names.
[2302.0:2321.0] You know, you can probably guess what some of the, you know, institutions related to to those nodes work. Now, you know, this was 1981. This was, you know, not only before the days of, you know, iPhones and, you know, other mobile Android devices and things like that.
[2321.0:2334.0] So really before the days of personal computers, right. So not everybody had a computer capable even remotely capable of connecting with other computers just sitting on your desk. Right.
[2334.0:2358.0] So most of the computers that were that did have, you know, regular, long distance connections to other computers were these big, you know, mainframes, many computers and things at campuses like EPSL, which, you know, which would also just in its early stages at that time. Right.
[2358.0:2378.0] And, you know, networked with, especially with computers at other campuses, academic campuses or tech companies. Now, why academic campuses and tech companies, while the tech companies were obviously involved in in the creation of the software for a lot of this.
[2378.0:2391.0] And you can see Microsoft sitting up there as one of the nodes like this was in the days where Microsoft could be one node on a network and that made sense. Right. You know, you, you know, you.
[2391.0:2405.0] And you might recognize some other, other names like Purdue. Well, they're heard of Purdue University. Well, that, that was their node. Right.
[2405.0:2425.0] So you see a lot of a whole bunch of nodes down there named UCB this, that and the other UCB off to UCB core UCB pad UCB, ARPA, UCB on X. Well, not hard to guess that that's university California Berkeley, they were kind of ahead of the curve, you know, even then.
[2425.0:2437.0] And, you know, in experimenting, you know, starting to develop this new ARPA that internet thing, right. So they had a lot of nodes before practically anybody else did.
[2437.0:2440.0] And then.
[2440.0:2457.0] And then you also see a lot of names that ended in the back, right. Or you are now what does you actually mean? Well, those are just unique machines, right. Because that was one of the standard kinds of kinds of machines that they couldn't look to this thing.
[2457.0:2461.0] And then back says were the others who's who sort of a back.
[2461.0:2471.0] But what company made the back says. Anybody remember that this is real, you know, early computer history.
[2471.0:2477.0] So there's there was there used to be this company called digital equipment operation deck.
[2477.0:2497.0] And then they made for a long time one of the most common types of many computer hardware that were in all kinds of these things. They had many of them ran, ran Unix, others ran decks, own operating system called VMS.
[2497.0:2517.0] And so, so actually a lot of these, you know, nodes that even worked, you know, called, you were called back says were nevertheless, probably a vast computers running Unix or, or whatnot. But anyway, these were all big computers.
[2517.0:2538.0] And now how were they talking with each other? Right. Again, this was the early days. Now, you know, of course, that very, but, but in the early in the earliest days of using it, not all connections were on all the time.
[2538.0:2555.0] So, if you didn't have a like, you know, they didn't even have always on, you know, kind of least lying, you know, okay, you know, now you pay, you know, institutions can lease a fiber optic cable or, you know, you can get it from your any upstream telco provider.
[2555.0:2570.0] But, you know, these, these didn't really exist there. So, how did, how did these nodes often communicate with each other? Anybody idea, have any idea? Maybe from, you know, watching old movies. Like really old movies. Yeah.
[2570.0:2584.0] Through telephone cables. Yeah. So, classic old analog telephoned cables that only knew how to communicate human voice. Right. Yeah. So, but how did they communicate data over those analog telephoned cables?
[2584.0:2589.0] Anywhere in the grid? Yeah.
[2589.0:2591.0] Yeah.
[2591.0:2613.0] Yeah. So, exactly. So, so, has anyone ever seen the really old like 1980s? I think movie war games like Matthew Broderick and his earliest theory like when he was like a kid. Right. Yeah. Okay.
[2613.0:2625.0] You, yeah. And pretty much no one else like if you want to rate piece of, you know, early computer history, go watch that is. It's a lot of fun. And you'll see some of these early modems.
[2625.0:2637.0] The, in fact, you know, the earliest modems were in the days of where the US was under this monopoly called mob bill. There was only one big telephone company. They had all the power.
[2637.0:2657.0] Basically, they later got broken up into a bunch of into a bunch of telephone companies. But while they were had all the power, they decided the rules for what you couldn't couldn't attach to, you know, a telephone cable emerging from the wall.
[2657.0:2675.0] And they had a rule that said you are not allowed to attach any of your own equipment. You know, the only equipment you can attach is a mob bill, you know, handset device, you know, and of course they had no idea about this like data internet thing that was not a mobile thing.
[2675.0:2695.0] You could not attach like plug a modem or anything like that into a mobile cable in the wall. Forget it. Right. So what did you do? Well, like you might have seen, you know, on this early early movie war games because you were not able to allow to, you know, you have any electronic coupling.
[2695.0:2718.0] And you have to have this separate device, you know, that would sit there with two cups in it. Right. And you take the classic telephone handset, you know, the thing you hold up to your ear with the, you know, the earpiece and the mouthpiece. Hopefully you've seen those anyway.
[2718.0:2736.0] Put it on this separate device, you know, so the speaker on, you know, on one is, is, you know, speaking into the microphone on the modem and the, you know, speaker on the, you know, modem is speaking into the, into the microphone on the, on the handset.
[2736.0:2756.0] And they are literally speaking to each other, you know, kind of modulating the, the bits into little squeals that go as audio into the mobile handset, which the mobile handset, of course, you know, just modulates back into analog digital signals on the phone line, you know, and then.
[2756.0:2770.0] But that's, you know, mobile territory versus newfangled digital territory, right. So, so this is how, you know, a lot of these early links work and they are impossibly slow. Right.
[2770.0:2779.0] In part because, you know, there was just very little bandwidth and they weren't using it very efficiently. So, you know, how fast do you think many of these links.
[2779.0:2787.0] We're going. Of course, it, you know, it evolved over time.
[2787.0:2789.0] So my, yeah, sorry.
[2789.0:2798.0] Yeah, 50 kilobits per second. Yeah. Well, you know what? That was, those were there, those were the days like the 56 K modems.
[2798.0:2810.0] Those were awesome because, you know, they were so that was like infinite bandwidth as I remember when I first got my 56 first 56 K modem, I'm totally dating myself.
[2810.0:2821.0] But, yeah, they, you know, eventually figured out how to get 56 K over these analog links. That was really impressive, you know, before ADSL lines and things like that.
[2821.0:2829.0] Before that, my earliest memory of using a modem was 300, not K bits per second.
[2829.0:2840.0] Right. 300 300, 300 bod they call it 300 bod modem. That was one of the standards. And yeah, you literally see the characters going, boom, boom, boom, boom, boom, boom, boom, boom, boom.
[2840.0:2849.0] When you're waiting for, oh, I kind of guess what you're talking about. So I'm just going to start answering you because I'm guessing the rest of your sentence because I can't bother to wait for this.
[2849.0:2854.0] 300 bod modem to send me the rest of your sentence, right.
[2854.0:2860.0] So yeah, yeah, those were fun. And then, you know, 1200 bod, you know, four times that. Oh, yes, rocking.
[2860.0:2871.0] So as I recall, this was in like, you know, late 80s, early 90s, the modems started, you know, getting faster and faster and faster until we had this 56 K awesomeness.
[2871.0:2884.0] And then we eventually had DSL lines where so 56 K was about where they really ran out of bandwidth like they were running into Shannon entropy kind of limitations on the analog spectrum part of these phone lines.
[2884.0:2898.0] Right. So, so they had to stop using the analog spectrum and DSL digital subscriber line was was where they basically said, OK, let's stop using the analog part of the phone line at all.
[2898.0:2904.0] Let's use this other spectrum that much more higher frequency spectrum that you can use all digitally.
[2904.0:2912.0] Then you get the analog part of the spectrum back so that you can still make voice calls using that. And then you get much, much higher speeds on the digital part.
[2912.0:2925.0] So, but that was another major technology change. Right. So anyway, this is this is ancient history. Right. But the point law, the real point is like, you know, a lot of these connections were old slow.
[2925.0:2945.0] And they weren't on all the time because that would be too expensive and these were long distance connections. And they weren't used all that much just sending a few messages a day for the, you know, crazy tech, these tech experimenters trying this using it thing.
[2945.0:2956.0] Right. And so they were all that on all the time they've only made like two or three calls per day at scheduled times. Right.
[2956.0:2969.0] And and that's because well, you know, they needed to literally dial the other computer with the with whatever the phone number is, you know, start the connection, do some stuff.
[2969.0:2987.0] Some information exchange and then shut down for the next few hours until the next scheduled call. Right. So how do you even have, you know, a messaging or a, you know, global communications system with links that are that slow and intermittent.
[2987.0:3006.0] And so this, this is what led to the creation of gossip protocols, which, which the user net is one example of. Right. So a little bit more using history to give you some perspective on like, you know, when was this.
[3006.0:3027.0] How did this evolve? Right. So I, you know, this is the early days when when you know the whole map of using that fit on this on this picture in 1981. Well, it exploded a lot in the 80s. Right. People, you know, more and more institutions got on the internet, the arpanette and then, which became the internet.
[3027.0:3046.0] It got more and more popular. Everybody was starting to use it in 1987. They had a major, a major event called the great renaming where they basically figured out how to organize all of the, the exploding number of discussions into a more coherent hierarchy of topics.
[3046.0:3064.0] So if, you know, you're, you're familiar with the hierarchical donate domain name system, well, using that invented a similar hierarchy of topics also with, you know, with little text labels separated with dots so that you had comp slash OS slash.
[3064.0:3081.0] So that was where you discussed units, you know, and comp dot OS dot OS dot Linux came much later. You know, and all the other operating systems and, you know, many other topics.
[3081.0:3095.0] So, you know, throughout the 80s, this was just a really, you know, exploding environment from, from this very small network to a very large and rich level network with a lot of people participating.
[3095.0:3112.0] And this explosion continued for basically 15 years. Peek if you, you know, by one metric to measure this explosion is, is to look at the number of books written and published about this thing.
[3112.0:3126.0] Right. And at some point in the early to mid 90s, this is when the general public kind of started hearing about us. So, so for years before then, it was more, it was an academic thing.
[3126.0:3144.0] Students like you in those days would have definitely heard about using using it a lot earlier than the general public did because only, you know, students and other academics is at these kinds of institutions that had this access, you know, would have, you know, would have been able to use it.
[3144.0:3161.0] So, gradually in the early 90s, big online services like America online brought large masses of normal people to the internet and gave them access to use net. Right.
[3161.0:3174.0] Suddenly in the early 90s, you know, everybody was interested. What is this unit thing? How do I use it? You know, it's all this cryptic text stuff, but it's awesome, right, because you can talk with anyone about anything.
[3174.0:3196.0] And so in 95 by my, by the data best data I was able to see, there was a like, you know, around seven books just on using it that, you know, of the type that you that you see all through these, you know, the tax section of bookstores, who remembers bookstores.
[3196.0:3213.0] Yeah, you still have have them in, you know, here in Switzerland, fortunately, I'm like, you left, but, but anyway, yeah, so they had text sections and the text section were full of, you know, internet for dummies and in this year, using that for dummies and things like that. Right.
[3213.0:3237.0] But then they, you know, after that, you saw rapid decline and then, you know, and then subsequent, subsequent years for the next decade, it really peered off, you know, until like a decade later, nobody's using using net anymore, you know, show up to a room like this, nobody's even heard of using it anymore unless they've taken CS234.
[3237.0:3250.0] So, why is this right, you know, so what, what happened now is this because the user net broke, is it because it stopped working.
[3250.0:3256.0] Well, no, actually that's, that's not why it broke, it actually is still there.
[3256.0:3277.0] You can still use it as you do in CS234, you can run your own use net note, it's still decentralized, if you want to run your own use net, you know, behaves in a pub in that network and, you know, gossip with all the other notes, you can totally do that.
[3277.0:3290.0] You know, gotcha, and things, you'll have to, you know, integrate into the social network of using that node operators and find some other nodes that are willing to appear with you and thing, you know, things like that.
[3290.0:3297.0] But, you know, there's still there still to be centralized and people kind of even still use it.
[3297.0:3307.0] It didn't break in terms of scalability or function, it actually proved to be super robust, right.
[3307.0:3320.0] But, well, it broke in a different way, people stopped, you know, stopped using it, it stopped being the go to place for, you know, public discussions online.
[3320.0:3335.0] So, why do you think that was, right, why might that have happened, yeah.
[3335.0:3362.0] Yeah, well, so Google didn't kill you net, but you're right that, that, you know, when Google came around as the search, first search engine that really kind of worked well like you, you know, it's much more reliably found what you were looking for and not, you know, a bunch of other, yeah, random stuff, right.
[3362.0:3370.0] That did definitely start affecting the way people, you know, people found things or discussed things.
[3370.0:3379.0] And, and the right later, you know, Google created among other big tech companies, yeah, who did this too.
[3379.0:3391.0] But, but Google created their own Google forums, these discussion forums, Google also had their own got into the user net business and had their own big archive of like all using.
[3391.0:3419.0] History ever for a while, I think they stopped doing this at some point too, but, but, yeah, but, you know, in the meantime, it wasn't just Google, but actually a lot of, a lot of companies as well as just, you know, open source projects were creating mailing list software things like where, you know, you sign up with it to a discussion form by email.
[3419.0:3429.0] You know, this, you have one of these a couple of these at EPSL like groups. EPSL.CH or lists. EPSL.CH.
[3429.0:3448.0] These are, you know, examples of the many kinds of mailing list managers. And that's one of the kinds of systems that people were ditching news net for people were leaving news net, you know, in this time period and going to those kinds of mailing list or Google discussion forums or Yahoo discussion forums or, you know, later into.
[3448.0:3458.0] Facebook and other social media and stuff like that. Why, you know, was it because using that stopped working yet.
[3458.0:3464.0] And so, you're like, one of these big science, either reaching change or.
[3464.0:3471.0] Good question. Yeah, good. So, you're, you're absolutely right that it wasn't changing.
[3471.0:3479.0] Maybe, or maybe not changing fast enough, but using that was never a tech giant like nobody, no company ever owned or ran using it.
[3479.0:3491.0] Right. So, I, so you know, it was not like Facebook or, you know, in that sense. So, so you're right and wrong. You know, it's it refusing to change was definitely a problem.
[3491.0:3504.0] It wasn't because somebody at use net dot use net ink decided not to change. It was, you know, something else. Yeah.
[3504.0:3514.0] Yeah. So, change was hard. Yeah. Exactly. So, so like all decentralized systems, you know, since then, you know,
[3514.0:3530.0] the basically reflected this, you know, the hardness of managing and evolving any decentralized system where you've got to persuade a bunch of, you know, creative independent developer types all over the world who totally don't have to do what you tell them to do.
[3530.0:3537.0] Right. You know, that's always hard to get the, you know, massive, you know, people like that to change. Right. Yeah.
[3537.0:3552.0] And so, yeah, getting, getting changes rolled out was one of the, you know, the fact that use nets could not adapt fast enough in part because of this to, you know, to solve the problems it had. Right.
[3552.0:3560.0] That, that was definitely a factor. But what was the problem that use net couldn't adapt to?
[3560.0:3566.0] Was it the load? What? Any, any guesses? Yeah.
[3566.0:3574.0] You could filter messages. So there were multiple ways. Yeah. So, there were.
[3574.0:3587.0] So the, the, the, the most obvious way to filter messages, or I didn't really yet get into the way you organized all these things, but you organize them into different discussion groups like these, you know, comp.os.
[3587.0:3609.0] You know, use next you choose which of the thousands of groups to look at and which to ignore. Right. So you only read, you know, the discussion groups you look at, you could also usually newsreader programs would let you filter in other ways like, you know, only only read these threads or look for, or this author or, you know, search for, for things of interest.
[3609.0:3617.0] But, you know, there, there were things like that, but, you know, the show filtering mechanisms were there, although they were limited. Yeah.
[3617.0:3622.0] To what?
[3622.0:3628.0] Well, that wasn't it you, but that's why that's what all of these, you know, using it for dummies books were helpful.
[3628.0:3643.0] And they, they actually did let, you know, ordinary people figure out how to use using it. It was, yeah, it was totally clunky text base, you know, all these, you know, it exposed people to all kinds of random things that, you know, for tech,
[3643.0:3658.0] or tech, or that ordinary people should never have to see, but they did because it was using that and it was awesome and let you, you know, talk about anything with anyone across the world, right. So it wasn't that they killed using it.
[3658.0:3670.0] And it was actually done on that is planified. Thank you, friends, for your canvas, logging server that has that story, but you actually make it available. Yeah, yeah. So I did.
[3670.0:3675.0] While I'm on your end, you're like, well, they always do.
[3675.0:3692.0] Yeah, so good get storage might have been an issue. Yeah, so in, and in fact, as using that exploded indeed the storage space on, you know, consumption on all these nodes also tended to explode.
[3692.0:3713.0] So running a user net node, you know, became a bigger and bigger and bigger, burst storage burden. Now, you know, the way using it typically operated is there was a in a clearly client server paradox or there were using that servers and all the servers would basically gossip all the content.
[3713.0:3725.0] Maybe, maybe across all of the groups or maybe only a subset of that, like some institutions would say, okay, we're not taking a we don't have the storage to take all of the using it use groups.
[3725.0:3736.0] We're going to take the comp dot is so sLC society talk ones and you know these ones, but all those suspicious out docked, you know,
[3736.0:3748.0] groups, you know, we're going to, we're going to toss those you can't you can't get those at our servers. They just like, you know, drop those in the bit bucket. So, you know, there were ways you could manage the storage.
[3748.0:3768.0] And they were effective enough so that like people actually, you know, started using using that, you know, messages, even as binary distribution mechanisms like, you know, to distribute images, videos, you know, binary program, you know, install a program software and stuff like that.
[3768.0:3778.0] And you know, kind of the node operators manage that kind of right, but so, you know, storage wasn't issue, but it didn't kill you. Yeah.
[3778.0:3802.0] Good question. Yeah. Yes and no. So this gets into this complicated identity issue. So I'm going to just quickly forward to this slide where where I have an example of a using that message header.
[3802.0:3818.0] So I'll get into this a little bit more in a minute, but every using that message indeed has an identity, you know, what the name of some identifier for the user. And it's at the top of that from line and it looks basically like an email address.
[3818.0:3836.0] And it might be an email address. So, you know, that's that would be handy because that way you can just kind of it was designed to go along with email. So if you see somebody, you see an interesting message from somebody and you want to follow up with them privately, but you just reply to the message and it becomes a private email.
[3836.0:3850.0] Right. So, so that's not some people people have identities, but their identities were typically defined by a user name at some server, right. You know, you build that ATT dot com. Right.
[3850.0:3859.0] And typically that server is running both an email server and a user net new server. Right. At that institution.
[3859.0:3876.0] And it's kind of like, you know, what does Jerry mean? Well, that's up to the operator of that that note. Right. So this was in the days where internet nodes were typically big machines run by organizations, not not random individuals.
[3876.0:3894.0] And it was kind of like, you know, you had kind of an identity. Well, it was your institutional identity. It was your EPSL user name, your identity as EPSL knows you because EPSL runs the computer that you use to access email and use net and stuff like that. Right.
[3894.0:3906.0] So it wasn't a bit coin identity where anybody can have their own public private key pair or something like that. Right. So, but they were also, you know, more human readable because they were just text based.
[3906.0:3919.0] But, you know, the meaning of Jerry is up to, you know, the operator of that note. Right. And so that had advantages and disadvantages that, you know, we'll get to in a minute. But yeah, there was some kind of identity.
[3919.0:3927.0] Yeah.
[3927.0:3938.0] So there were there. They're definitely worse standard ways of having say institutional institution specific news groups.
[3938.0:3960.0] In fact, so in this hierarchy, so I mean, I briefly mentioned this great renaming where they created, you know, the overall hierarchy and they defined what they called the big seven news groups. They were, you know, they basically the top level domains of discussion forums that were kind of intended to be global for everyone to participate in.
[3960.0:3974.0] But then there was always the expectation that institutions like BFL or any university if you, if they wanted to have a kind of local, you know, more institutional forum that's only open to the members of that institution, you could do that.
[3974.0:3991.0] And you'll even find, you know, EPFL dot hierarchy, or, you know, for, or a similar hierarchy hierarchy, like institution specific, you know, often in institutions that supported, at least while they supported, use net officially.
[3991.0:3997.0] Right. So yeah, you could do that. And people did. Yeah.
[3997.0:4004.0] Maybe browsers killed using it. Yeah. Why? Yeah.
[4004.0:4022.0] So yeah. Yeah. So that's that's a good yes to browsers. You know, and hypertext made everything much, you know, prettier and flashier and more imaging and, you know, eventually more animated Diffie and all that kind of stuff.
[4022.0:4040.0] But you isn't actually got that to eventually like so use, you know, rich text formats like that you use an email now. Well, those extensions work for us not to. So you could you actually can do rich text, you know, web like text now and use net messages.
[4040.0:4055.0] You know, take a while, but they got it that didn't kill you. Yeah. Uh huh. Ah. There you go. Spam. Exactly. Yeah.
[4055.0:4066.0] Like emails only so much worse. Right. So email kind of survived spam. Like only kind of because we barely tolerate email. Right.
[4066.0:4076.0] We barely managed to deal with email like we got these now sophisticated AI based spam filters that still make mistakes one way or the other.
[4076.0:4083.0] And you know, email still kind of survives using that kind of didn't right. So.
[4083.0:4097.0] So there's some particular history that you that that that's that weren't worthy of mentioned. So all these years back up to before 1994.
[4097.0:4114.0] Nobody had ever heard of spam, at least not in this context. It wasn't a turp. It wasn't a thing. You know, spam was was a kind of meat package meat, you know, made by a whole mill foods and like you know, like I guess Hawaiians really love to.
[4114.0:4128.0] And and and Monte and you know, the Monte Python made made fun of it. But you know, the it wasn't a thing in the digital world until.
[4128.0:4146.0] When was it January 1994 somebody decides to post a intern a message not on just one or two of the of the forums here. Let me quickly go forward to to this.
[4146.0:4158.0] So you can see another of the important fields and using it news article is news groups use that announced this is a you know, this is the forum that this message is getting posted to.
[4158.0:4172.0] Now using that always had a feature a nice handy feature called cross post it that you could actually if you wanted post a message the same message to multiple forums at once you could say news groups news.
[4172.0:4184.0] Coma something you know X comma like on the V like you know this list list several groups in that you know and post it to the same time.
[4184.0:4197.0] And this was actually even kind of intelligently implemented in that all the servers would know how to gossip this message only once right it's just logically posted to all of those different formats.
[4197.0:4220.0] It's not only actually gets communicated to all these servers just once right so it's kind of a nice and nice efficient well designed cross posting mechanism and you know at all those different servers where people can read messages it would just appear in each of the different news groups that are that it's cross posted to right now of course there was always a.
[4220.0:4234.0] You know that you know that you know that you know that you are not supposed to post messages you know in places where they're not appropriate not you know topic relevant etc.
[4234.0:4261.0] People largely followed that or else they got shout out at and they got talk to by the you know if they really missed the haved for a while they would get talk to by the system administrators at their institution right now it would be VPSI coming into telling you hey you know we've heard some complaints about your your use of EPSLs you know news server can you please stop it otherwise we're going to disable your account right.
[4261.0:4278.0] Disable your using that access right so you know they had ways to do that but you know using that was you know around 1994 floating not only in popularity but you know access to the general public.
[4278.0:4300.0] It wasn't really a closed system only for academics anymore a lot of you know people in a lot of different places could start starting notes where they wanted and the and the you know administration of those notes was was a lot looser it was a lot easier to add a note and some enterprising.
[4300.0:4312.0] Person in January 94 posted a message with the title global alert for all Jesus is coming soon.
[4312.0:4327.0] So this was the first internet spam as at least as it's become widely know right yeah.
[4327.0:4333.0] There probably was but I think that came later yeah so so the.
[4333.0:4355.0] So this so this in 1994 spam was the you know as far as I know the you know the first kind of global internet spam it went on using it it was basically just trying to you know kind of get converts it's a religious person trying to get converse not trying to make make money or anything.
[4355.0:4384.0] But it didn't take long for some enterprising some enterprising I believe lawyer as it turned out to get this idea well and of course what what got people really mad about this message was not just that you know I mean it was on topic but they posted it to all of the news groups like they basically crawled you know found you know a list of all of the news group names put commas between.
[4384.0:4412.0] And you know created a header line like that but with a very very long news groups list right and just created this message and posted it to all of the news groups believing that well this is we're saving the world this is you know worth worthwhile everybody should read this right everybody needs to be saved right how can you argue with that right but on the other hand you know it didn't take long for somebody else to think hey I don't know if you know you know you can get it.
[4412.0:4436.0] To think hey this is a great idea you know this is an easy low cost way to get a lot of audience really quickly and it only like three months later April 1994 spam number two or at least for first commercial spam any any guesses what it what it was about.
[4436.0:4464.0] Yeah set well good guess but you know that based on the history of the internet and you know you totally would expect that but actually that came later too right so the first commercial spam actually wanting money was well the title it was in the title of the spam green green card lottery final one question mark.
[4464.0:4490.0] So this is a very us things apologize but if you're not a not aware green card is that per me say in the in the US it's the permanent residents card that you know everyone who wants to immigrate to the US and wants to have the right to live there you know permanently until you get the US citizenship and these you know we're often very highly demanded and there are a lot of very very.
[4490.0:4516.0] A lot of you know lawyers that law offices that wanted to make a lot of money did so by charging arm and a leg for immigrants to help immigrants you know get green cards basically and so this was a law firm basically say this is a great way to get a lot of customers really quickly you know especially international customers of the kind that tend to be students in.
[4516.0:4524.0] You know US institutions are one to be students in US institutions yeah you want a green card come to us right you know so so.
[4524.0:4539.0] And of course both of these spam events cause big discussion firestorms and caused a lot of you know a lot of the using tech people to try to you know go into high gear so you know this is a real problem how do what do we do about this.
[4539.0:4552.0] But yeah coming back you know to the original issue well yeah you know they did figure out some things you know they figured out for one thing they wait they figured out a way to create moderated news groups right so you can.
[4552.0:4563.0] Tag certain news groups as moderated which means that an ordinary person who get post a message well the message doesn't immediately go to everyone instead it becomes a private email.
[4563.0:4582.0] Direct automatically directed at the well known moderator for that the designated moderator for now that news group and then the moderator looks at it and says okay is this appropriate or is it spam okay if it's appropriate I'm going to use my special moderator privileges to post it on behalf of the original user.
[4582.0:4592.0] Otherwise I'm going to delete it and say go away right so you know there were there were moderated news groups there were some other provisions that were gradually introduced to help.
[4592.0:4621.0] Help deal with found but they were kind of too little too late they never you know they they never successfully kept you know most you know most using that news groups to to basically from descending into like you know a signal to you know a signal to noise ratio problem that basically scared people away and
[4621.0:4650.0] you know that's why people increasingly started saying okay I love using that but I just can't deal with with it anymore I'm reading five or 10 spam for every one or two interesting messages so sorry let's go create our own private email list or let's go to a Google forum or Yahoo forum or something like that because there's administrators there who will kick off.
[4650.0:4670.0] Spammers who try to get on right you know and we can have some kind of civilized discussion again unlike the you know completely uncontrolled chaos you know of using that discussion for right so it's ironic though because
[4670.0:4688.0] using that was explicitly just like the internet use net was created one of the basic goals design goals of using that was actually not only decentralization but central but censorship resistance right so
[4688.0:4706.0] you know these these goals were very much embedded in the consciousness of the very the early designers of the internet and using that in many of these decentralized systems is not so she not go and you know the latest bit you know you know blockchain
[4706.0:4734.0] official not as that you know kind of came up with this you know tech I you know going to somewhat anarchistic tech idea or like you know information wants to be free we want you know everything to be censorship resistant everybody should be able to say anything they want no you know no bounds right and using that succeeded in doing that it in fact was very censorship resistant
[4734.0:4755.0] you could like you know individual operators of some of those nodes could try to censor messages and sometimes sometimes they did try it like you know that one of the provision anti spam provisions was that some of the operators would say okay we're going to maintain a black list of you know spammer known spammers known places that spam comes from
[4755.0:4782.0] you know when we identify spam we're going to squash it on our servers until our friends that that spam and so you shouldn't redistribute either things like that but the you net was too good it was too censorship resistant those kind of thing like they only worked locally you know and the and the spam would route route around those attempts to censor it just like you know anything else right so it was
[4782.0:4805.0] it succeeded admirally admirably in being extremely censorship resistant but it ultimately didn't succeed in you know keeping keeping people's attention right because of the you know uncontrolled signal to know is rich so it was kind of a victim of its own success in that regard
[4805.0:4823.0] so yeah and so that one of that that issue of like you know privacy anonymity censorship resistance versus accountability and you know kind of can you can you keep a system under control
[4823.0:4841.0] keep it useful and attractive and appealing for people you know those are actually issues that that's one of the big unsolved issues in decentralized systems you know using that didn't solve it and this is what it collapse due to spam
[4841.0:4860.0] fear of file sharing networks even though you know bit torrent is still in use but you know actually for a much more typically much more limited way than then file sharing systems were originally envisioned mostly so they kind of collapsed for for similar reasons
[4860.0:4880.0] and you know unfortunately blockchain smart contract systems haven't really solved this either they've you know come up with a different quality solution that works for some things and totally doesn't work in other ways so we'll come come back to that as a as a regular thing
[4880.0:4897.0] now so so in the next lecture so we're about about out of time today in the next lecture we're going to dive a lot more closely into the technical details both of using it the way using that gossip messages around
[4897.0:4919.0] like how you implement this for better or worse as well as some of the theory some of the related theory of gossip protocols and and you know how how you can make them work efficiently how you evaluate how how efficient they are how you how you make sure that they they don't collapse right
[4919.0:4947.0] now just one more quick note how many of you are sci-fi fans ever read and how many of you have ever read either of these books like so you've heard of burner vinges getting older older generation sci-fi out there now either kind of dated but you know if you're into decentralized systems especially if you're interested in use net you should totally read these fire upon the deep
[4947.0:4973.0] deepness in the sky the first one I think actually both of them won the top sci-fi award the Hugo award awesome books but they're they they have satirical versions of use net embedded all through like intergalactic use net where like you know kind of all the user that use net nodes are you know planets and and different alien civilizations trying kind of to communicate with each other
[4973.0:5001.0] and succeeding or failing and miserably in different ways and it's hilarious because it's such a great reflection of how use net both did and didn't work so you know if you want kind of a interesting sci-fi perspective on on use net the those are those are really a really a right but okay so much more about the technology of use net and gossip next time but okay once again
[5001.0:5015.0] thanks for taking the course welcome I hope you enjoy it be prepared to do a lot of tough programming and debugging so only stay if you want to do that right but but otherwise well thanks
